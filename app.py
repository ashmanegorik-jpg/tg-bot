# app.py
import os
import asyncio
from flask import Flask, request, jsonify
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Update, BotCommand
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, read_rows, write_rows, next_id, generate_unique_alias

app = Flask(__name__)

# –¢–æ–∫–µ–Ω —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or 0)

# --- –°—Ç–∞–≤–∏—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∞–ø–¥–µ–π—Ç–µ ---
STARTUP_DONE = False

async def ensure_startup():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ Telegram.
    """
    global STARTUP_DONE
    if STARTUP_DONE:
        return

    # –ö–ª–∞–¥—ë–º bot/dp –≤ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç aiogram
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    await bot.set_my_commands([
        BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("add_buy", "–ò–≥—Ä–∞|–¶–µ–Ω–∞|–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏"),
        BotCommand("generate_listing", "<id> <target_net> ‚Äî —Ä–∞—Å—á—ë—Ç —Ü–µ–Ω—ã"),
        BotCommand("mark_published", "<id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º"),
        BotCommand("sold", "<id>|<price> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É"),
        BotCommand("stats", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("monthly", "YYYY-MM ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"),
        BotCommand("export", "–≠–∫—Å–ø–æ—Ä—Ç CSV"),
    ])
    STARTUP_DONE = True


@app.route("/", methods=["GET"])
def root():
    return "OK", 200


@app.route(f"/{TOKEN}", methods=["GET", "POST"])
def telegram_webhook():
    if request.method == "GET":
        return "Webhook is working", 200

    try:
        data = request.get_json(force=True, silent=True) or {}
        print(">>> incoming update:", data)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç—ã –±–µ–∑ message/callback_query
        if "message" not in data and "callback_query" not in data:
            return "IGNORED", 200

        # –°–ª–æ–≤–∞—Ä—å -> –æ–±—ä–µ–∫—Ç Update
        update = Update.to_object(data)

        # –í–∞–∂–Ω–æ: –ø–æ–ª–æ–∂–∏—Ç—å bot/dp –≤ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç aiogram
        Bot.set_current(bot)
        Dispatcher.set_current(dp)

        async def _handle():
            # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å—Ç–∞–≤–∏–º –æ–¥–∏–Ω —Ä–∞–∑
            await ensure_startup()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç
            await dp.process_update(update)

        asyncio.run(_handle())
        return "OK", 200

    except Exception as e:
        import traceback
        print(">>> ERROR in webhook:", e)
        traceback.print_exc()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª —Ç–æ—Ç –∂–µ –∞–ø–¥–µ–π—Ç
        return "OK", 200

@app.post("/lolz/notify")
def lolz_notify():
    """
    –ñ–¥—ë–º JSON –æ—Ç Lolz (–∏–ª–∏ —Ç–≤–æ–µ–≥–æ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞) –≤–∏–¥–∞:
    {
      "game": "–∫—Å",
      "description": "CS2 Prime | Garrys Mod",
      "price": 7.29
    }
    –ö–ª—é—á–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å: title/amount/buy_price –∏ —Ç.–ø.
    """
    data = request.get_json(silent=True) or {}
    game = (data.get("game") or data.get("title") or "").strip()
    account_desc = (data.get("description") or data.get("desc") or "").strip()
    price_val = data.get("price") or data.get("amount") or data.get("buy_price")

    if not game or price_val is None:
        return jsonify({"ok": False, "error": "missing game or price"}), 400

    try:
        price_f = float(str(price_val).replace(",", "."))
    except Exception:
        return jsonify({"ok": False, "error": "bad price"}), 400

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ—Ç –≤ CSV (–∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–∏—à–ª–æ –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    rows = read_rows()
    existing_aliases = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
    alias = generate_unique_alias(existing_aliases)
    nid = next_id(rows)

    new = {
        "id": str(nid),
        "alias": alias,
        "source_text": "lolz:webhook",
        "game": game,
        "account_desc": account_desc,
        "buy_price": f"{price_f:.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": "",
        "notes": "",
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
    )
    kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
    kb.add(
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
    )

    draft_text = (
        f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
        f"–ò–≥—Ä–∞: {game}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {account_desc}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {price_f:.2f}$\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
    )

    # –®–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        async def _send():
            await bot.send_message(ADMIN_CHAT_ID, draft_text, reply_markup=kb)
        try:
            asyncio.run(_send())
        except RuntimeError:
            # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω
            loop = asyncio.get_event_loop()
            loop.create_task(_send())

    return jsonify({"ok": True, "id": nid})
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ gunicorn)
    app.run(host="0.0.0.0", port=10000)
