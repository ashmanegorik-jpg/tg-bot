# app.py
import os
import asyncio
from flask import Flask, request, jsonify
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Update, BotCommand
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot, read_rows, write_rows, next_id, generate_unique_alias
from bot import parse_notification  # –î–û–ë–ê–í–ò–¢–¨
from bot import FILE_LOCK  # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ CSV

app = Flask(__name__)

# –¢–æ–∫–µ–Ω —á–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or 0)

# --- –°—Ç–∞–≤–∏—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∞–ø–¥–µ–π—Ç–µ ---
STARTUP_DONE = False

async def ensure_startup():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ Telegram.
    """
    global STARTUP_DONE
    if STARTUP_DONE:
        return

    # –ö–ª–∞–¥—ë–º bot/dp –≤ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç aiogram
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    await bot.set_my_commands([
        BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("add_buy", "–ò–≥—Ä–∞|–¶–µ–Ω–∞|–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏"),
        BotCommand("generate_listing", "<id> <target_net> ‚Äî —Ä–∞—Å—á—ë—Ç —Ü–µ–Ω—ã"),
        BotCommand("mark_published", "<id> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º"),
        BotCommand("sold", "<id>|<price> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É"),
        BotCommand("stats", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("monthly", "YYYY-MM ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"),
        BotCommand("export", "–≠–∫—Å–ø–æ—Ä—Ç CSV"),
    ])
    if not POLL_STARTED:
        asyncio.create_task(poll_lolz())
        POLL_STARTED = True
    STARTUP_DONE = True

# app.py (–ø–æ—Å–ª–µ ensure_startup –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
from lolz_api import LolzClient, LolzError
from bot import dp, bot, read_rows, write_rows, next_id, generate_unique_alias, parse_notification  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

POLL_STARTED = False

async def poll_lolz():
    client = LolzClient()
    seen = set()
    while True:
        try:
            data = await client.get_recent_purchases(limit=50)
            # TODO: —Ä–∞–∑–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É data –ø–æ –¥–æ–∫–µ:
            items = data.get("items") or data.get("data") or []
            for it in items:
                pid = str(it.get("id") or it.get("purchase_id"))
                if not pid or pid in seen:
                    continue
                seen.add(pid)

                # –°–æ–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è: game/title, description, price –∏ —Ç.–ø.
                game = (it.get("title") or it.get("game") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞").strip()
                account_desc = it.get("description") or ""
                buy_price = float(it.get("price") or 0)

                # –°–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ª–æ—Ç–∞ (—Ä–æ–≤–Ω–æ –∫–∞–∫ —Å–µ–π—á–∞—Å –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞)
                rows = read_rows()
                alias_set = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
                alias = generate_unique_alias(alias_set)
                nid = next_id(rows)
                new = {
                    "id": str(nid),
                    "alias": alias,
                    "source_text": f"lolz_purchase:{pid}",
                    "game": game,
                    "account_desc": account_desc,
                    "buy_price": f"{buy_price:.2f}",
                    "buy_date": datetime.utcnow().isoformat(),
                    "status": "in_stock",
                    "min_sale_for_target": "",
                    "notes": "",
                    "sell_price": "",
                    "sell_date": "",
                    "net_profit": ""
                }
                rows.append(new)
                write_rows(rows)

                kb = InlineKeyboardMarkup(row_width=4)
                kb.add(
                    InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
                    InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
                    InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
                )
                kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
                kb.add(
                    InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
                    InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
                )

                text = (
                    f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
                    f"–ò–≥—Ä–∞: {game}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {account_desc}\n"
                    f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {buy_price:.2f}$\n\n"
                    "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
                )
                # –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –≤ –õ–° ‚Äî –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–π user_id –∏–ª–∏ chat_id
                # await bot.send_message(<YOUR_CHAT_ID>, text, reply_markup=kb)

        except Exception as e:
            print("poll error:", e)

        await asyncio.sleep(25)

@app.route("/", methods=["GET"])
def root():
    return "OK", 200


@app.route(f"/{TOKEN}", methods=["GET", "POST"])
def telegram_webhook():
    if request.method == "GET":
        return "Webhook is working", 200

    try:
        data = request.get_json(force=True, silent=True) or {}
        print(">>> incoming update:", data)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç—ã –±–µ–∑ message/callback_query
        if "message" not in data and "callback_query" not in data:
            return "IGNORED", 200

        # –°–ª–æ–≤–∞—Ä—å -> –æ–±—ä–µ–∫—Ç Update
        update = Update.to_object(data)

        # –í–∞–∂–Ω–æ: –ø–æ–ª–æ–∂–∏—Ç—å bot/dp –≤ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç aiogram
        Bot.set_current(bot)
        Dispatcher.set_current(dp)

        async def _handle():
            # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å—Ç–∞–≤–∏–º –æ–¥–∏–Ω —Ä–∞–∑
            await ensure_startup()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç
            await dp.process_update(update)

        asyncio.run(_handle())
        return "OK", 200

    except Exception as e:
        import traceback
        print(">>> ERROR in webhook:", e)
        traceback.print_exc()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª —Ç–æ—Ç –∂–µ –∞–ø–¥–µ–π—Ç
        return "OK", 200
@app.route("/llz_hook", methods=["POST"])
def llz_hook():
    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    secret = request.args.get("secret", "")
    if secret != os.getenv("CRON_SECRET"):
        return "Forbidden", 403

    # 2) —á–∏—Ç–∞–µ–º JSON
    data = request.get_json(force=True, silent=True) or {}
    game = (data.get("game") or "").strip()
    account_desc = (data.get("account_desc") or "").strip()

    # price –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–æ–π ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    price_raw = data.get("price")
    try:
        price = float(str(price_raw).replace(",", "."))
    except Exception:
        price = None

    if not game or price is None:
        return "Bad payload", 400

    async def _work():
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞/–∫–æ–º–∞–Ω–¥—ã
        await ensure_startup()

        # 3) –ø–∏—à–µ–º –≤ CSV –Ω–æ–≤—ã–π –ª–æ—Ç
        async with FILE_LOCK:
            rows = read_rows()
            existing_aliases = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
            alias = generate_unique_alias(existing_aliases)
            nid = next_id(rows)
            new = {
                "id": str(nid),
                "alias": alias,
                "source_text": f"llz_hook:{game}|{price:.2f}|{account_desc}",
                "game": game,
                "account_desc": account_desc,
                "buy_price": f"{price:.2f}",
                "buy_date": datetime.utcnow().isoformat(),
                "status": "in_stock",
                "min_sale_for_target": "",
                "notes": "",
                "sell_price": "",
                "sell_date": "",
                "net_profit": ""
            }
            rows.append(new)
            write_rows(rows)

        # 4) –≥–æ—Ç–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç ‚Äî –∫–∞–∫ –≤ –±–æ—Ç–µ
        kb = InlineKeyboardMarkup(row_width=4)
        kb.add(
            InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
            InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
            InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
        )
        kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
        kb.add(
            InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
            InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
        )

        draft_text = (
            f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
            f"–ò–≥—Ä–∞: {game}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {account_desc}\n"
            f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {price:.2f}$\n\n"
            "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
        )

        # 5) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–±–µ –≤ –ª–∏—á–∫—É (–∏–ª–∏ –≤ —á–∞—Ç) ‚Äî –≤–æ–∑—å–º–∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        chat_id = int(os.getenv("ADMIN_CHAT_ID"))
        await bot.send_message(chat_id, draft_text, reply_markup=kb)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —á–∞—Å—Ç—å
    asyncio.run(_work())
    return "OK", 200
@app.post("/lolz/notify")
def lolz_notify():
    """
    –ñ–¥—ë–º JSON –æ—Ç Lolz (–∏–ª–∏ —Ç–≤–æ–µ–≥–æ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞) –≤–∏–¥–∞:
    {
      "game": "–∫—Å",
      "description": "CS2 Prime | Garrys Mod",
      "price": 7.29
    }
    –ö–ª—é—á–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å: title/amount/buy_price –∏ —Ç.–ø.
    """
    data = request.get_json(silent=True) or {}
    game = (data.get("game") or data.get("title") or "").strip()
    account_desc = (data.get("description") or data.get("desc") or "").strip()
    price_val = data.get("price") or data.get("amount") or data.get("buy_price")

    if not game or price_val is None:
        return jsonify({"ok": False, "error": "missing game or price"}), 400

    try:
        price_f = float(str(price_val).replace(",", "."))
    except Exception:
        return jsonify({"ok": False, "error": "bad price"}), 400

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–æ—Ç –≤ CSV (–∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–∏—à–ª–æ –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    rows = read_rows()
    existing_aliases = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
    alias = generate_unique_alias(existing_aliases)
    nid = next_id(rows)

    new = {
        "id": str(nid),
        "alias": alias,
        "source_text": "lolz:webhook",
        "game": game,
        "account_desc": account_desc,
        "buy_price": f"{price_f:.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": "",
        "notes": "",
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
    )
    kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
    kb.add(
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
    )

    draft_text = (
        f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
        f"–ò–≥—Ä–∞: {game}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {account_desc}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {price_f:.2f}$\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
    )

    # –®–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        async def _send():
            await bot.send_message(ADMIN_CHAT_ID, draft_text, reply_markup=kb)
        try:
            asyncio.run(_send())
        except RuntimeError:
            # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω
            loop = asyncio.get_event_loop()
            loop.create_task(_send())

    return jsonify({"ok": True, "id": nid})
# ===== –†–æ—É—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç ¬´–º–æ—Å—Ç–∞¬ª (email/webhook/—Å–∫—Ä–∏–ø—Ç) =====
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º ID
CRON_SECRET = os.getenv("CRON_SECRET", "")            # —Å–µ–∫—Ä–µ—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã

@app.route("/lolz/email", methods=["POST"])
def lolz_email():
    # 1) –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ —Å–µ–∫—Ä–µ—Ç—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    sec = request.headers.get("X-Secret")
    if not CRON_SECRET or sec != CRON_SECRET:
        return "forbidden", 403

    # 2) –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ JSON {"text": "..."}
    body = request.get_json(force=True, silent=True) or {}
    text = (body.get("text") or "").strip()
    if not text:
        return "bad request", 400

    # 3) –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Ç–µ–º –∂–µ –ø–∞—Ä—Å–µ—Ä–æ–º, —á—Ç–æ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    parsed = parse_notification(text)
    if not parsed.get("buy_price"):
        return "IGNORED", 200  # –ø—Ä–∏—à–ª–æ –Ω–µ —Ç–æ –ø–∏—Å—å–º–æ

    # 4) –ø–∏—à–µ–º –≤ CSV –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
    rows = read_rows()
    existing_aliases = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
    alias = generate_unique_alias(existing_aliases)
    nid = next_id(rows)

    new = {
        "id": str(nid),
        "alias": alias,
        "source_text": parsed["source_text"],
        "game": parsed["game"],
        "account_desc": parsed["account_desc"],
        "buy_price": f"{float(parsed['buy_price']):.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": "",
        "notes": "",
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)

    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
    )
    kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
    kb.add(
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
    )

    msg = (
        f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
        f"–ò–≥—Ä–∞: {parsed['game']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {parsed['account_desc']}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {float(parsed['buy_price']):.2f}$\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
    )

    async def _send():
        Bot.set_current(bot)
        Dispatcher.set_current(dp)
        await bot.send_message(ADMIN_CHAT_ID, msg, reply_markup=kb)

    asyncio.run(_send())
    return "OK", 200
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ gunicorn)
    app.run(host="0.0.0.0", port=10000)
@app.route("/debug/push_buy/<secret>", methods=["POST"])
def debug_push_buy(secret):
    import json
    from flask import request
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    # 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if secret != os.getenv("CRON_SECRET"):
        return "Forbidden", 403

    data = request.get_json(silent=True) or {}
    game         = data.get("game", "").strip()
    account_desc = data.get("account_desc", "").strip()
    buy_price    = data.get("buy_price", None)

    if not game or buy_price is None:
        return "Bad Request", 400

    # 2) –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV (—Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ bot.py)
    rows = read_rows()
    existing_aliases = {(r.get("alias") or "").lower() for r in rows if r.get("alias")}
    alias = generate_unique_alias(existing_aliases)
    nid = next_id(rows)
    new = {
        "id": str(nid),
        "alias": alias,
        "source_text": f"debug:{game}|{buy_price}|{account_desc}",
        "game": game,
        "account_desc": account_desc,
        "buy_price": f"{float(buy_price):.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": "",
        "notes": "",
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)

    # 3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
    )
    kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
    kb.add(
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
    )

    # –∫—É–¥–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–≤–æ–π –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç)
    admin_chat_id = os.getenv("ADMIN_CHAT_ID")  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ Render
    text = (
        f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
        f"–ò–≥—Ä–∞: {game}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {account_desc}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {float(buy_price):.2f}$\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
    )

    async def _send():
        from aiogram import Bot, Dispatcher
        Bot.set_current(bot)
        Dispatcher.set_current(dp)
        await bot.send_message(admin_chat_id, text, reply_markup=kb)

    asyncio.run(_send())
    return "OK", 200
