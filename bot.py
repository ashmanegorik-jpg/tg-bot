import os
import csv
import re
from datetime import datetime
from decimal import Decimal, InvalidOperation

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand

# ==== –¢–û–ö–ï–ù –¢–û–õ–¨–ö–û –ó–î–ï–°–¨: API_TOKEN ====
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is not set")

bot = Bot(token=API_TOKEN)  # –±–µ–∑ parse_mode
dp = Dispatcher(bot)


# ====== HELP-—Ç–µ–∫—Å—Ç –∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ======
HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.\n\n"
    "–†–∞–±–æ—Ç–∞—é —Å CSV-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º.\n\n"
    "–ü—Ä–∏—Å—ã–ª–∞–π –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ–±–∞—è (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /add_buy).\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/add_buy –ò–≥—Ä–∞|–¶–µ–Ω–∞|–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ª–æ—Ç—ã\n"
    "/generate_listing <id> <target_net> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –∏ —à–∞–±–ª–æ–Ω\n"
    "/mark_published <id> ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π\n"
    "/sold <id>|<price> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π (–ø—Ä–∏–º–µ—Ä: /sold 3|10)\n"
    "/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    "/monthly YYYY-MM ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü\n"
    "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç CSV\n"
    "/reset_stats ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É (–Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)\n"
)

async def set_bot_commands():
    commands = [
        BotCommand("start", "–ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("add_buy", "–ò–≥—Ä–∞|–¶–µ–Ω–∞|–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"),
        BotCommand("list", "–ª–æ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏"),
        BotCommand("generate_listing", "<id> <target_net>"),
        BotCommand("mark_published", "<id>"),
        BotCommand("sold", "<id>|<price>"),
        BotCommand("stats", "–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("monthly", "YYYY-MM"),
        BotCommand("export", "–≤—ã–≥—Ä—É–∑–∫–∞ CSV"),
        BotCommand("reset_stats", "–æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"),
    ]
    await bot.set_my_commands(commands)
# ======================================


# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
API_TOKEN = os.getenv("BOT_TOKEN")  # –í–ê–ñ–ù–û: —á–∏—Ç–∞–µ–º BOT_TOKEN (–∫–∞–∫ –≤ Render)
DATA_CSV = os.path.join(os.path.dirname(__file__), "inventory.csv")
COMMISSION = 0.06  # 6% (3% –ø—Ä–æ–¥–∞–∂–∞ + 3% –≤—ã–≤–æ–¥)
# ==============================

if not API_TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is not set")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞—ë–º CSV –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
FIELDNAMES = [
    "id", "source_text", "game", "account_desc", "buy_price",
    "buy_date", "status", "min_sale_for_target", "notes",
    "sell_price", "sell_date", "net_profit"
]

if not os.path.exists(DATA_CSV):
    with open(DATA_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writeheader()

# ---- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è CSV ----
def read_rows():
    with open(DATA_CSV, newline="", encoding="utf-8") as f:
        return list(csv.DictReader(f))

def write_rows(rows):
    with open(DATA_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writeheader()
        writer.writerows(rows)


def reset_csv():
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç inventory.csv, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    with open(DATA_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writeheader()


def next_id(rows):
    if not rows:
        return 1
    return max(int(r["id"]) for r in rows) + 1

def to_decimal(s):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ',' –∏–ª–∏ '.' –≤ Decimal, —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ NBSP."""
    if s is None:
        raise InvalidOperation
    s = s.replace("\xa0", "").replace(" ", "").strip()
    s = s.replace(",", ".")
    return Decimal(s)

def calc_min_sale(buy_price, target_net=1.0):
    # sale = (target_net + buy) / (1 - COMMISSION)
    buy = Decimal(str(buy_price))
    target = Decimal(str(target_net))
    denom = Decimal("1") - Decimal(str(COMMISSION))
    sale = (target + buy) / denom
    return float(sale.quantize(Decimal("0.01")))

def calc_net_from_sale(sale_price, buy_price):
    sale = Decimal(str(sale_price))
    buy = Decimal(str(buy_price))
    received = sale * (Decimal("1") - Decimal(str(COMMISSION)))
    net = received - buy
    return float(net.quantize(Decimal("0.01")))

# ---- –ü–∞—Ä—Å–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----
RE_LINK = re.compile(r'–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\s*["‚Äú](?P<link>[^"‚Äù]+)["‚Äù]', re.IGNORECASE)
RE_BUYPRICE = re.compile(r'–∑–∞\s*([\d\.,]+)\s*\$')
RE_KUP = re.compile(r'–∫—É–ø–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç\s*(?P<acc>.*?)\s*(?:–í —Å–µ—Ç–∏:|–≤ —Å–µ—Ç–∏:|–∑–∞\s|$)', re.IGNORECASE)
RE_GAME_QUOTE_FALLBACK = re.compile(r'["‚Äú](?P<g>[^"‚Äù]+)["‚Äù]')

def parse_notification(text: str):
    text = text.strip()
    game = None
    account_desc = ""
    buy_price = None

    m = RE_LINK.search(text)
    if m:
        game = m.group("link").strip()

    m2 = RE_KUP.search(text)
    if m2:
        account_desc = m2.group("acc").strip()

    m3 = RE_BUYPRICE.search(text)
    if m3:
        price_str = m3.group(1)
        try:
            buy_price = float(str(to_decimal(price_str)))
        except Exception:
            buy_price = None

    if not game:
        m4 = RE_GAME_QUOTE_FALLBACK.search(text)
        if m4:
            game = m4.group("g").strip()

    if not game:
        m5 = re.search(r'(.+?)–∫—É–ø–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç', text, re.IGNORECASE)
        if m5:
            game = m5.group(1).strip().split()[-1]

    return {
        "game": game or "",
        "account_desc": account_desc or "",
        "buy_price": buy_price,
        "source_text": text
    }

# ---- –ö–æ–º–∞–Ω–¥—ã/Handlers ----
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.answer(HELP_TEXT)


@dp.message_handler(commands=["add_buy"])
async def cmd_add_buy(message: types.Message):
    args = message.get_args()
    if not args or "|" not in args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_buy –ò–≥—Ä–∞|–¶–µ–Ω–∞|–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")
        return
    try:
        game, price, notes = [p.strip() for p in args.split("|", 2)]
        price_f = float(to_decimal(price))
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")
        return

    rows = read_rows()
    nid = next_id(rows)
    min_sale = calc_min_sale(price_f, target_net=1.0)
    new = {
        "id": str(nid),
        "source_text": f"manual:{game}|{price_f}|{notes}",
        "game": game,
        "account_desc": "",
        "buy_price": f"{price_f:.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": f"{min_sale:.2f}",
        "notes": notes,
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –ª–æ—Ç ID {nid} ‚Äî {game} –∑–∞ {price_f}$\n–ú–∏–Ω. —Ü–µ–Ω–∞ –¥–ª—è $1: {min_sale}$")

@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    rows = read_rows()
    in_stock = [r for r in rows if r["status"] in ("in_stock", "listed")]
    if not in_stock:
        await message.answer("–ù–µ—Ç –ª–æ—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return
    text = "–õ–æ—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏:\n"
    for r in in_stock:
        text += f"ID {r['id']}: {r['game']} ‚Äî buy {r['buy_price']}$ ‚Äî status: {r['status']} ‚Äî notes: {r['notes']}\n"
    await message.answer(text)

@dp.message_handler(
    lambda m: (m.text is not None) and not m.text.startswith('/'),
    content_types=types.ContentType.TEXT,
)
async def handle_text(message: types.Message):
    text = message.text.strip()

    # üëâ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ç ‚Äî –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç handler –∫–æ–º–∞–Ω–¥—ã
    if text.startswith("/"):
        return

    parsed = parse_notification(text)
    if not parsed["buy_price"]:
        return

    rows = read_rows()
    nid = next_id(rows)

    # –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ç—É—Ç –º–∏–Ω. —Ü–µ–Ω—É, —á—Ç–æ–±—ã –Ω–µ —Å–≤–µ—Ç–∏—Ç—å –µ—ë –¥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
    new = {
        "id": str(nid),
        "source_text": parsed["source_text"],
        "game": parsed["game"],
        "account_desc": parsed["account_desc"],
        "buy_price": f"{float(parsed['buy_price']):.2f}",
        "buy_date": datetime.utcnow().isoformat(),
        "status": "in_stock",
        "min_sale_for_target": "",  # –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
        "notes": "",
        "sell_price": "",
        "sell_date": "",
        "net_profit": ""
    }
    rows.append(new)
    write_rows(rows)

    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $0.5", callback_data=f"profit:{nid}:0.5"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $1",   callback_data=f"profit:{nid}:1"),
        InlineKeyboardButton("–ü—Ä–æ—Ñ–∏—Ç $2",   callback_data=f"profit:{nid}:2"),
    )
    kb.add(InlineKeyboardButton("Custom", callback_data=f"profit:{nid}:custom"))
    kb.add(
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º", callback_data=f"posted:{nid}"),
        InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–º",      callback_data=f"sold_direct:{nid}")
    )

    draft_text = (
        f"üÜï –ù–æ–≤—ã–π –ª–æ—Ç (ID {nid})\n"
        f"–ò–≥—Ä–∞: {parsed['game']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {parsed['account_desc']}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –∑–∞: {float(parsed['buy_price']):.2f}$\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω. —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —à–∞–±–ª–æ–Ω."
    )
    await message.answer(draft_text, reply_markup=kb)

@dp.message_handler(commands=["generate_listing"])
async def cmd_generate_listing(message: types.Message):
    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /generate_listing <id> <target_net>")
        return

    nid, target = args[0], args[1]
    try:
        target_f = float(target)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç.")
        return

    rows = read_rows()
    row = next((r for r in rows if r["id"] == nid), None)
    if not row:
        await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    min_sale = calc_min_sale(float(row["buy_price"]), target_net=target_f)

    txt = (
        f"ID {nid} ‚Äî {row['game']}\n"
        f"–ö—É–ø–ª–µ–Ω–æ: {row['buy_price']}$\n"
        f"–¶–µ–ª–µ–≤–æ–π —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {target_f}$\n"
        f"–ú–∏–Ω. —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {min_sale}$\n\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ—Ç–∞:\n"
        f'Stirka | "{row["game"]}"'
    )
    await message.answer(txt)
   

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("posted:"))
async def cb_posted(call: types.CallbackQuery):
    _, nid = call.data.split(":", 1)
    rows = read_rows()
    row = next((r for r in rows if r["id"] == nid), None)
    if not row:
        await call.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    row["status"] = "listed"
    write_rows(rows)
    await call.message.answer(f"–õ–æ—Ç {nid} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π.")
    await call.answer()

    
 @dp.callback_query_handler(lambda c: c.data and c.data.startswith("wipe:"))
 async def cb_wipe(call: types.CallbackQuery):
    if call.data == "wipe:yes":
        reset_csv()
        await call.message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ (inventory.csv –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–º).")
    else:
        await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("sold_direct:"))
async def cb_sold_direct(call: types.CallbackQuery):
    _, nid = call.data.split(":", 1)
    await call.message.answer(f"–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ª–æ—Ç {nid} –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤—å: /sold {nid}|<—Ü–µ–Ω–∞_–ø—Ä–æ–¥–∞–∂–∏>\n–ü—Ä–∏–º–µ—Ä: /sold {nid}|10")
    await call.answer()
    

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("profit:"))
async def cb_profit(call: types.CallbackQuery):
    _, nid, profit = call.data.split(":", 2)

    rows = read_rows()
    row = next((r for r in rows if r["id"] == nid), None)
    if not row:
        await call.answer("–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if profit == "custom":
        await call.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ /generate_listing {nid} <—Ü–µ–ª–µ–≤–æ–π_–ø—Ä–æ—Ñ–∏—Ç>\n"
            f"–ü—Ä–∏–º–µ—Ä: /generate_listing {nid} 1.5"
        )
        await call.answer()
        return

    try:
        target = float(profit)
    except Exception:
        target = 1.0

    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
    min_sale = calc_min_sale(float(row["buy_price"]), target_net=target)

    listing_text = (
        f"ID {nid} ‚Äî {row['game']}\n"
        f"–ö—É–ø–ª–µ–Ω–æ: {row['buy_price']}$\n"
        f"–¶–µ–ª–µ–≤–æ–π —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç: {target}$\n"
        f"–ú–∏–Ω. —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {min_sale}$\n\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ—Ç–∞:\n"
        f'Stirka | "{row["game"]}"'
    )
    await call.message.answer(listing_text)
    await call.answer()
@dp.message_handler(commands=["mark_published"])
async def cmd_mark_published(message: types.Message):
    nid = message.get_args().strip()
    if not nid:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mark_published <id>")
        return
    rows = read_rows()
    row = next((r for r in rows if r["id"] == nid), None)
    if not row:
        await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    row["status"] = "listed"
    write_rows(rows)
    await message.answer(f"ID {nid} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π.")

@dp.message_handler(commands=["sold"])
async def cmd_sold(message: types.Message):
    args = message.get_args()
    if not args or "|" not in args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sold <id>|<price>\n–ü—Ä–∏–º–µ—Ä: /sold 3|10")
        return
    nid, price = [p.strip() for p in args.split("|", 1)]
    try:
        price_f = float(to_decimal(price))
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞.")
        return
    rows = read_rows()
    row = next((r for r in rows if r["id"] == nid), None)
    if not row:
        await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    net = calc_net_from_sale(price_f, float(row["buy_price"]))
    row["status"] = "sold"
    row["sell_price"] = f"{price_f:.2f}"
    row["sell_date"] = datetime.utcnow().isoformat()
    row["net_profit"] = f"{net:.2f}"
    write_rows(rows)
    await message.answer(f"ID {nid} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π. –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net:.2f}$")

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    rows = read_rows()
    bought_count = len(rows)
    sold = [r for r in rows if r["status"] == "sold" and r["net_profit"]]
    total_net = sum(float(r["net_profit"]) for r in sold) if sold else 0.0
    total_spent = sum(float(r["buy_price"]) for r in rows)
    sold_count = len(sold)
    text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {bought_count}\n"
        f"–ü—Ä–æ–¥–∞–Ω–æ: {sold_count}\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {total_spent:.2f}$\n"
        f"–°—É–º–º–∞—Ä–Ω–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {total_net:.2f}$\n"
    )
    await message.answer(text)
@dp.message_handler(commands=["reset_stats"])
async def cmd_reset_stats(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–Å", callback_data="wipe:yes"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="wipe:no"),
    )
    await message.answer(
        "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã.\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –∑–∞–ø–∏—Å–∏ (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb
    )

@dp.message_handler(commands=["monthly"])
async def cmd_monthly(message: types.Message):
    arg = message.get_args().strip()
    if not arg:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monthly YYYY-MM")
        return
    try:
        year, month = arg.split("-", 1)
        year = int(year); month = int(month)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /monthly 2025-10")
        return
    rows = read_rows()
    bought = [r for r in rows if r["buy_date"] and r["buy_date"].startswith(f"{year:04d}-{month:02d}")]
    sold = [r for r in rows if r["sell_date"] and r["sell_date"].startswith(f"{year:04d}-{month:02d}")]
    total_spent = sum(float(r["buy_price"]) for r in bought)
    total_net = sum(float(r["net_profit"]) for r in sold if r["net_profit"])
    res = (
        f"–ú–µ—Å—è—Ü {year}-{month:02d}:\n"
        f"–ö—É–ø–ª–µ–Ω–æ: {len(bought)} —à—Ç., –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f}$\n"
        f"–ü—Ä–æ–¥–∞–Ω–æ: {len(sold)} —à—Ç., —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {total_net:.2f}$\n"
    )
    await message.answer(res)

@dp.message_handler(commands=["export"])
async def cmd_export(message: types.Message):
    if not os.path.exists(DATA_CSV):
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await message.answer_document(open(DATA_CSV, "rb"))

# –í–ê–ñ–ù–û: –Ω–∏–∫–∞–∫–∏—Ö executor.start_polling –∑–¥–µ—Å—å –Ω–µ—Ç!
# dp –∏ bot –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç app.py (Flask) –∏ –≥–æ–Ω—è–µ—Ç webhook.


















